<!-- index.ejs -->

<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Audio Call</title>
  <link rel="stylesheet" type="text/css" href="/style.css">
</head>
<body>
  <h1>Audio Call</h1>

  <div id="users"></div>
  <div id="call-interface">
    <h2 id="call-status">No active call</h2>
    <div id="local-video"></div>
    <div id="remote-video"></div>
    <button id="call-button">Call</button>
    <button id="hangup-button" disabled>Hang Up</button>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    const usersDiv = document.getElementById('users');
    const callStatusDiv = document.getElementById('call-status');
    const localVideoDiv = document.getElementById('local-video');
    const remoteVideoDiv = document.getElementById('remote-video');
    const callButton = document.getElementById('call-button');
    const hangupButton = document.getElementById('hangup-button');

    let localStream;
    let remoteStream;
    let peerConnection;

    // Add new user to user list
    socket.on('user-connected', (userId) => {
      console.log(`User ${userId} connected`);
      const userDiv = document.createElement('div');
      userDiv.id = userId;
      userDiv.innerHTML = userId;
      usersDiv.appendChild(userDiv);
    });

    // Remove user from user list
    socket.on('user-disconnected', (userId) => {
      console.log(`User ${userId} disconnected`);
      const userDiv = document.getElementById(userId);
      userDiv.remove();
    });

    // Handle incoming call
    socket.on('incoming-call', (senderId) => {
      console.log(`User ${senderId} is calling`);
      if (confirm(`Incoming call from user ${senderId}. Do you want to answer?`)) {
        socket.emit('answer', senderId);
      }
    });

    // Handle call accepted
    socket.on('call-accepted', (recipientId) => {
      console.log(`User ${recipientId} accepted call`);
      callStatusDiv.textContent = `In call with user ${recipientId}`;
      callButton.disabled = true;
      hangupButton.disabled = false;
      startWebRTC(true, recipientId);
    });

    // Handle call ended
    socket.on('call-ended', (userId) => {
      console.log(`Call with user ${userId} ended`);
      callStatusDiv.textContent = 'No active call';
      callButton.disabled = false;
      hangupButton.disabled = true;
      endWebRTC();
    });

    // Get local media stream and set up WebRTC
    function startWebRTC(isInitiator, otherUserId) {
      navigator.mediaDevices.getUserMedia({ audio: true, video: false })
        .then((stream) => {
          localStream = stream;
          localVideoDiv.srcObject = stream;

          if (isInitiator) {
            peerConnection = new RTCPeerConnection();
            peerConnection.addStream(localStream);
            peerConnection.createOffer()
              .then((offer) => {
                return peerConnection.setLocalDescription(offer);
              })
              .then(() => {
                socket.emit('call', otherUserId);
              });
            peerConnection.onicecandidate = (event) => {
              if (event.candidate) {
                socket.emit('candidate', otherUserId, event.candidate);
              }
            };
         
        } else {
            peerConnection = new RTCPeerConnection();
            peerConnection.addStream(localStream);
            peerConnection.onaddstream = (event) => {
              remoteVideoDiv.srcObject = event.stream;
            };
            socket.on('offer', (senderId, offer) => {
              peerConnection.setRemoteDescription(new RTCSessionDescription(offer))
                .then(() => {
                  return peerConnection.createAnswer();
                })
                .then((answer) => {
                  return peerConnection.setLocalDescription(answer);
                })
                .then(() => {
                  socket.emit('answer', senderId, peerConnection.localDescription);
                });
            });
            socket.on('candidate', (senderId, candidate) => {
              peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
            });
          }
        })
        .catch((error) => {
          console.error('Error getting local media stream:', error);
        });
    }

    // End WebRTC and release media resources
    function endWebRTC() {
      if (peerConnection) {
        peerConnection.close();
        peerConnection = null;
      }
      if (localStream) {
        localStream.getTracks().forEach((track) => track.stop());
        localStream = null;
      }
      if (remoteStream) {
        remoteStream.getTracks().forEach((track) => track.stop());
        remoteStream = null;
        remoteVideoDiv.srcObject = null;
      }
    }

    // Handle call button click
    callButton.addEventListener('click', () => {
      const recipientId = prompt('Enter user ID to call:');
      if (recipientId) {
        callStatusDiv.textContent = `Calling user ${recipientId}...`;
        callButton.disabled = true;
        startWebRTC(true, recipientId);
      }
    });

    // Handle hangup button click
    hangupButton.addEventListener('click', () => {
      socket.emit('hangup');
    });

    // Clean up WebRTC and socket when the window is closed
    window.addEventListener('beforeunload', () => {
      endWebRTC();
      socket.close();
    });
  </script>
</body>
</html>

